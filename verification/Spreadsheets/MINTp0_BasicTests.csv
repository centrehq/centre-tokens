File,Function,Special Condition,Code,Description
Controller.sol,configureController,msg.sender == owner,bt004,bt004 configureController works when owner is msg.sender
Controller.sol,configureController,msg.sender != owner,bt005,bt005 configureController reverts when owner is not msg.sender
Controller.sol,configureController,controllers[C]=0,bt019,bt019 configureController works when controller[C]=0
Controller.sol,configureController,controllers[C] != 0,bt020,bt020 configureController works when controller[C] != 0
Controller.sol,configureController,controllers[C]=C,bt021,"bt021 configureController(C,C) works"
Controller.sol,configureController,controllers[C] == msg.sender,bt022,bt022 configureController works when setting controller[C]=msg.sender
Controller.sol,configureController,controllers[C] == newM,bt023,"bt023 configureController(C, newM) works when controller[C]=newM"
Controller.sol,constructor,controllers[ALL] = 0,bt016,bt016 Constructor sets all controllers to 0
Controller.sol,removeController,msg.sender == owner,bt008,bt008 removeController works when owner is msg.sender
Controller.sol,removeController,msg.sender != owner,bt009,bt009 removeController reverts when owner is not msg.sender
Controller.sol,removeController,controllers[C]=0,bt017,bt017 removeController does not revert when controllers[C] is 0
Controller.sol,removeController,controllers[C]=M,bt018,bt018 removeController removes an arbitrary controller
FiatTokenV1.sol,constructor,minterManager.isMinter[ALL] == false,bt045,bt045 constructor - minterManager.isMinter[ALL] is false
FiatTokenV1.sol,constructor,minterManager.minterAllowance[ALL] == 0,bt046,bt046 constructor - minterManager.minterAllowance[ALL] = 0
MintController.sol,configureMinter,controllers[msg.sender]==0,bt012,bt012 configureMinter reverts when msg.sender is not a controller
MintController.sol,configureMinter,controllers[msg.sender]==M,bt013,bt013 configureMinter works when controllers[msg.sender]=M
MintController.sol,configureMinter,minterManager = 0,bt033,bt033 configureMinter reverts when minterManager is 0
MintController.sol,configureMinter,minterManager != MinterManagerInterface,bt034,bt034 configureMinter reverts when minterManager is a user account
MintController.sol,configureMinter,minterManager == OK,bt035,bt035 configureMinter works when minterManager is ok
MintController.sol,configureMinter,minterManager.isMinter == false,bt039,"bt039 configureMinter(M, amt) works when minterManager.isMinter(M)=false"
MintController.sol,configureMinter,minterManager.isMinter == true,bt040,"bt040 configureMinter(M, amt) works when minterManager.isMinter(M)=true"
MintController.sol,configureMinter,minterManager.minterAllowance[M] == 0,bt050,"bt050 configureMinter(M,amt) works when minterAllowance=0"
MintController.sol,configureMinter,minterManager.minterAllowance[M] == X,bt051,"bt051 configureMinter(M,amt) works when minterAllowance>0"
MintController.sol,configureMinter,minterManager.minterAllowance[M] == BIG,bt052,"bt052 configureMinter(M,amt) works when amt+minterAllowance > 2^256"
MintController.sol,constructor,minterManager == init,bt024,bt024 Constructor sets minterManager
MintController.sol,incrementMinterAllowance,controllers[msg.sender]==0,bt014,bt014 incrementMinterAllowance reverts if msg.sender is not a controller
MintController.sol,incrementMinterAllowance,controllers[msg.sender]==M,bt015,bt015 incrementMinterAllowance works when controllers[msg.sender]=M
MintController.sol,incrementMinterAllowance,minterManager = 0,bt036,bt036 incrementMinterAllowance reverts when minterManager is 0
MintController.sol,incrementMinterAllowance,minterManager != MinterManagerInterface,bt037,bt037 incrementMinterAllowance reverts when minterManager is a user account
MintController.sol,incrementMinterAllowance,minterManager == OK,bt038,bt038 incrementMinterAllowance works when minterManager is ok
MintController.sol,incrementMinterAllowance,minterManager.isMinter == false,bt043,"bt043 incrementMinterAllowance(M, amt) reverts when minterManager.isMinter(M)=false"
MintController.sol,incrementMinterAllowance,minterManager.isMinter == true,bt044,"bt044 incrementMinterAllowance(M, amt) works when minterManager.isMinter(M)=true"
MintController.sol,incrementMinterAllowance,minterManager.minterAllowance[M] == 0,bt047,"bt047 incrementMinterAllowance(M,amt) works when minterAllowance is 0"
MintController.sol,incrementMinterAllowance,minterManager.minterAllowance[M] == X,bt048,"bt048 incrementMinterAllowance(M, amt) works when minterAllowance > 0"
MintController.sol,incrementMinterAllowance,minterManager.minterAllowance[M] == BIG,bt049,"bt049 incrementMinterAllowance(M,amt) reverts when minterAllowance[M] + amt > 2^256"
MintController.sol,removeMinter,controllers[msg.sender]==0,bt010,bt010 removeMinter reverts when msg.sender is not a controller
MintController.sol,removeMinter,controllers[msg.sender]==M,bt011,bt011 removeMinter sets minters[M] to 0
MintController.sol,removeMinter,minterManager = 0,bt030,bt030 removeMinter reverts when minterManager is 0
MintController.sol,removeMinter,minterManager != MinterManagerInterface,bt031,bt031 removeMinter reverts when minterManager is a user account
MintController.sol,removeMinter,minterManager == OK,bt032,bt032 removeMinter works when minterManager is ok
MintController.sol,removeMinter,minterManager.isMinter == false,bt041,bt041 removeMinter(M) works when minterManager.isMinter(M)=false
MintController.sol,removeMinter,minterManager.isMinter == true,bt042,bt042 removeMinter(M) works when minterManager.isMinter(M)=true
MintController.sol,removeMinter,minterManager.minterAllowance[M] == 0,bt053,bt053 removeMinter works when the minterAllowance is 0
MintController.sol,removeMinter,minterManager.minterAllowance[M] == X,bt054,bt054 removeMinter works when the minterAllowance is not zero
MintController.sol,removeMinter,minterManager.minterAllowance[M] == BIG,bt055,bt055 removeMinter works when the minterAllowance is big
MintController.sol,setMinterManager,msg.sender == owner,bt006,bt006 setMinterManager works when owner is msg.sender
MintController.sol,setMinterManager,msg.sender != owner,bt007,bt007 setMinterManager reverts when owner is not msg.sender
MintController.sol,setMinterManager,minterManager == 0,bt025,bt025 setMinterManager(x) works when existing minterManager = 0
MintController.sol,setMinterManager,minterManager != 0,bt026,bt026 setMinterManager(x) works when existing minterManager != 0
MintController.sol,setMinterManager,minterManager == msg.sender,bt027,bt027 setMinterManager(x) works when x = msg.sender
MintController.sol,setMinterManager,minterManager == newMinterManager,bt028,bt028 setMinterManager(x) works when x = minterManager
Ownable.sol,constructor,msg.sender == owner,bt001,bt001 Constructor - owner is msg.sender
Ownable.sol,transferOwnership,msg.sender == owner,bt002,bt002 transferOwnership works when owner is msg.sender
Ownable.sol,transferOwnership,msg.sender != owner,bt003,bt003 transferOwnership reverts when owner is not msg.sender
MintController.sol,decrementMinterAllowance,controllers[msg.sender]==0,bt056,bt056 decrementMinterAllowance reverts if msg.sender is not a controller
MintController.sol,decrementMinterAllowance,controllers[msg.sender]==M,bt057,bt057 decrementMinterAllowance works when controllers[msg.sender]=M
MintController.sol,decrementMinterAllowance,minterManager = 0,bt058,bt058 decrementMinterAllowance reverts when minterManager is 0
MintController.sol,decrementMinterAllowance,minterManager != MinterManagerInterface,bt059,bt059 decrementMinterAllowance reverts when minterManager is a user account
MintController.sol,decrementMinterAllowance,minterManager == OK,bt060,bt060 decrementMinterAllowance works when minterManager is ok
MintController.sol,decrementMinterAllowance,minterManager.isMinter == false,bt061,"bt061 decrementMinterAllowance(M, amt) reverts when minterManager.isMinter(M)=false"
MintController.sol,decrementMinterAllowance,minterManager.isMinter == true,bt062,"bt062 decrementMinterAllowance(M, amt) works when minterManager.isMinter(M)=true"
MintController.sol,decrementMinterAllowance,minterManager.minterAllowance[M] == 0,bt063,"bt063 decrementMinterAllowance(M,amt) works when minterAllowance is MAX"
MintController.sol,decrementMinterAllowance,minterManager.minterAllowance[M] == X,bt064,"bt064 decrementMinterAllowance(M, amt) works when minterAllowance > 0"
MintController.sol,decrementMinterAllowance,minterManager.minterAllowance[M] == BIG,bt065,"bt065 decrementMinterAllowance(M,amt) reverts when minterAllowance[M] - amt < 0"